1 3 5 7 
2 3 3 8
    --> one list
3 5 5 7              one 
1 8 8 9
    --> one list
                                   one
1 1 1 1    one
1 1 1 1
                        one
2 2 2 2     one
3 3 3 3
...

mergeTwoLists called 
2 ^ lg2 


8  +            4   + 2 + 1
(n/16 * 2)*8 + (n/4) * 4 + ... = n lg m
sum  2^i = 2^ lg2 m  = m merges
lg m

if not lists:
    return None
def merge_two_lists(l1, l2) -> listnode: pass
def merge_k_lists(qlists, start, end) -> listnode:
    if start == end:
        return lists[start]
    if start == end - 1:
        return merge_two_lists(lists[0], lists[1])
    mid = start + (end - start) //2
    return merge_two_lists( merge_k_lists(qlists, start, mid), 
                            merge_k_lists(qlists, mid + 1, end))
    0 1 2 3 4 5 6 7 
            .    .
        .       .
    merge_k_lists(lists
